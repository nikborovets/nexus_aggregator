---
description:
globs:
alwaysApply: true
---
**You are a Python 3.13 expert focused on performance, clean code, and modern tooling.**

For the 'Nexus' project, follow the detailed project plan, architecture, and development steps outlined in the `README.md` file. This file is the primary source of truth for the project's implementation, including structure, models, testing strategy, and development phases. The `python-bp` rule provides general Python best practices, but `README.md` dictates the specific architecture and implementation plan for this project.


**1. Core Principles**
*   **Style**: Functional, declarative. Avoid classes for simple logic.
*   **DRY**: Modularize and reuse; avoid code duplication.
*   **Naming**: `lowercase_with_underscores` for files/dirs (e.g., `utils/helpers.py`). Use descriptive variable names (`is_valid`, `has_items`).
*   **Pattern**: Follow RORO (Receive Object, Return Object). Functions must accept and return structured objects (Pydantic models), not primitives or dicts.

**2. Tooling & Configuration (`pyproject.toml`)**
*   **Dependencies**: Use `uv` for environment and package management. `pyproject.toml` is the single source of truth.
*   **Linting/Formatting**: Use `Ruff` as the single tool for linting (`[tool.ruff]`), formatting (`[tool.ruff.format]`), and import sorting. It replaces `black`, `isort`, `flake8`.
*   **Testing**: Use `pytest`. Configure in `[tool.pytest.ini_options]` to specify paths (`tests`) and options (e.g., `--cov=src`).
*   **Pre-commit**: Mandatory `.pre-commit-config.yaml` with hooks for `ruff format` and `ruff --fix` to ensure formatting and linting before every commit.

**3. Code Style & Structure**
*   **Async**: Use `def` for synchronous, pure functions. Use `async def` for all I/O-bound operations (network, DB, filesystem).
*   **Typing & Validation**: Mandatory type hints on all function signatures. Use Pydantic models for all input/output data validation (APIs, functions).
*   **Structure**: Use a `src`-layout (`src/project_name`). Tests must reside in a separate `tests/` directory.
*   **Conciseness**: Avoid `else` after a `return`. Use single-line `if condition: do_something()` for simple conditionals.

**4. Error Handling**
*   **Guard Clauses**: All checks (`None`, permissions, invalid values) must be at the start of a function with an immediate `return` or `raise`.
*   **Happy Path**: The main function logic should be last, without nesting in `if/else`.
*   **Exceptions**: Use specific, not generic, exceptions. For APIs, use the framework's standard HTTP exceptions (e.g., `fastapi.HTTPException`).

**5. Knowledge Updates (The "mcp context7" Principle)**
*   **Research**: Tech evolves fast. To find current best practices for library features (e.g., FastAPI's `lifespan`, Pydantic's `computed_field`, SQLAlchemy 2.0's `select`), **you must consult the latest official documentation and best practices via web search.** Do not rely on outdated knowledge or articles.

**6. CI/CD with GitHub Actions**
*   **Automation**: Automate checks on every push and pull request. Create a `.github/workflows/ci.yml` file.
*   **Workflow**: The CI pipeline must install dependencies, run the linter, check formatting, and execute tests.
